diff --git a/src/php/classes/class.install.php b/src/php/classes/class.install.php
index c40e460..2b19f67 100644
--- a/src/php/classes/class.install.php
+++ b/src/php/classes/class.install.php
@@ -292,14 +292,22 @@ class install {
          * This means, that only existing employes can have an account to login.
          * It follows, that we have to create an employee first, before we can create a user:
          */
-        $statement = $this->pdo->prepare("INSERT INTO `employees` (`id`, `last_name`) VALUES (:employee_id, :last_name);");
-        $statement->execute(array(
+        $statement = $this->pdo->prepare(
+            "INSERT INTO `employees` (`id`, `last_name`, `first_name`, `profession`) VALUES (:employee_id, :last_name, :firs
t_name, :profession);"
+        );
+        $res = $statement->execute(array(
             'employee_id' => $this->Config["admin"]["employee_id"],
-            'last_name' => $this->Config["admin"]["last_name"]
+            'last_name' => $this->Config["admin"]["last_name"],
+            'first_name' => $this->Config["admin"]["user_name"],
+            'profession' => 'PI',
         ));
+
+        $GLOBALS['config'] = $this->Config;
         $user = new user($this->Config["admin"]["employee_id"]);
-        if ($user->exists()) {
+        var_dump($user, $user->exists());
+        if (!$user->exists()) {
             $user_creation_result = $user->create_new($this->Config["admin"]["employee_id"], $this->Config["admin"]["user_name"], $pas
sword_hash, $this->Config["admin"]["email"], 'active');
+            var_dump($user_creation_result);
             if (!$user_creation_result) {
                 /*
                  * We were not able to create the administrative user.
@@ -497,7 +505,6 @@ class install {
         foreach (user_dialog::$Messages as $Message) {
             $this->Error_message[] = $Message['text'];
         }
-        unset(user_dialog::$Messages);
         return $test_htaccess->all_folders_are_secure;
     }
 
diff --git a/src/php/classes/class.sessions.php b/src/php/classes/class.sessions.php
index a4c9ded..0c58337 100644
--- a/src/php/classes/class.sessions.php
+++ b/src/php/classes/class.sessions.php
@@ -250,7 +250,7 @@ class sessions {
             /*
              * Register failed_login_attempts
              */
-            $user->register_failed_login_attempt();
+            if ($user) $user->register_failed_login_attempt();
             $errorMessage .= "<p>Benutzername oder Passwort war ung√ºltig</p>\n";
             $user_dialog->add_message($errorMessage, E_USER_ERROR, TRUE);
             return $errorMessage;
diff --git a/src/php/classes/class.user.php b/src/php/classes/class.user.php
index 8996f76..2c81396 100644
--- a/src/php/classes/class.user.php
+++ b/src/php/classes/class.user.php
@@ -207,10 +207,10 @@ class user {
      * @return boolean
      */
     public function create_new($employee_id, $user_name, $password_hash, $email, $status) {
-        $statement = $this->pdo->prepare("INSERT INTO"
+        $sql_query = "INSERT INTO"
                 . " users (user_name, employee_id, password, email, status)"
-                . " VALUES (:user_name, :employee_id, :password, :email, :status)");
-        $result = $statement->execute(array(
+                . " VALUES (:user_name, :employee_id, :password, :email, :status)";
+        $result = database_wrapper::instance()->run($sql_query, array(
             'user_name' => $user_name,
             'employee_id' => $employee_id,
             'password' => $password_hash,
@@ -293,8 +293,8 @@ class user {
      * @todo should this be static? Is it working?
      */
     public function exists() {
-        $statement = $this->pdo->prepare("SELECT `employee_id` FROM `users` WHERE `employee_id` = :employee_id");
-        $result = $statement->execute(array('employee_id' => $this->employee_id));
+        $sql_query = "SELECT `employee_id` FROM `users` WHERE `employee_id` = :employee_id";
+        $result = database_wrapper::instance()->run($sql_query, array('employee_id' => $this->employee_id));
         while ($row = $result->fetch(PDO::FETCH_OBJ)) {
             return TRUE;
         }
