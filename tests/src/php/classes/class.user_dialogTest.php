<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-11-21 at 21:53:40.
 */
class user_dialogTest extends PHPUnit_Framework_TestCase {

    /**
     * @var user_dialog
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new user_dialog;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers user_dialog::build_messages
     */
    public function testBuild_messages() {
        $this->object->add_message('Test');
        $html_should = <<<EOT
<div class='user-dialog-container'>
<div class=error>
<p>Test</p>
</div>
</div>

EOT;
        $html_is = $this->object->build_messages();
        $this->assertEquals($html_should, $html_is);
    }

    /**
     * @covers user_dialog::build_messages_for_cli
     */
    public function testBuild_messages_for_cli() {
        $this->object->$Messages = array();
        $this->object->add_message('Test');
        $html_should = <<<EOT
# Messages
## error
- Test


EOT;
        $html_is = $this->object->build_messages_for_cli();
        $this->assertEquals($html_should, $html_is);
    }

    /**
     * @covers user_dialog::add_message
     * @todo   Implement testAdd_message().
     */
    public function testAdd_message() {
        $this->object->$Messages = array();
        $this->object->add_message('Test<script>alert(with xss ptotection);</script>', E_USER_WARNING, FALSE);
        $this->assertEquals(array(0 => array(
                'text' => 'Test&lt;script&gt;alert(with xss ptotection);&lt;/script&gt;',
                'type' => 'warning',
            ),
                ), $this->object->$Messages);
        /*
         * Reset and test without xss protection:
         */
        $this->object->$Messages = array();
        $this->object->add_message('Test<script>alert(without xss ptotection);</script>', E_USER_NOTICE, TRUE);
        $this->assertEquals(array(0 => array(
                'text' => '<pre>Test<script>alert(without xss ptotection);</script></pre>',
                'type' => 'notification',
            ),
                ), $this->object->$Messages);
    }

    /**
     * @covers user_dialog::build_contact_form
     * @todo   Implement testBuild_contact_form().
     */
    public function testBuild_contact_form() {
        $contact_form = $this->object->build_contact_form();
        $this->assertEquals("
        <div id='userDialogContactFormDiv'>
            <a title='SchieÃŸen' href='#' onclick='hide_contact_form()'>
            <span id='removeFormDivSpan'>
                x
            </span>
            </a>
            <form accept-charset='utf-8' id='contact_form' method=POST>
                <p>
                    Nachricht<br>
                    <textarea name=message rows=15></textarea>
                </p>
                <p>
                <input type='submit' name=submit_contact_form>
                </p>
            </form>
        </div>

", $contact_form);
    }

    /**
     * @covers user_dialog::contact_form_send_mail
     * @todo   Implement testContact_form_send_mail().
     */
    public function testContact_form_send_mail() {
        user_dialog::$Messages = array();


        $data = array(
            'submit_contact_form' => 'PHPUnit',
            'message' => 'Test message',
        );

        $curl_handle = curl_init();
        curl_setopt($curl_handle, CURLOPT_URL, PDR_HTTP_SERVER_APPLICATION_PATH . "/tests/src/php/classes/class/testContact_form_send_mail.php");
        curl_setopt($curl_handle, CURLOPT_POSTFIELDS, http_build_query($data));
        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);
        $response = curl_exec($curl_handle);
        if (curl_errno($curl_handle)) {
            var_export(curl_error($curl_handle));
        }
        curl_close($curl_handle);
        $this->assertEquals($response, 'passed');
    }

}
